--FUNCTION DEL DISPARADOR PARA ACUMULAR A CUENTAS A SEGUNDO NIVEL
CREATE OR REPLACE FUNCTION func_TotalResultadoSegundoNivel()
RETURNS TRIGGER
AS
$BODY$
--Variables
		DECLARE
		id1 INT := 0;
		id_ciclo INT :=0;
		catalogo_id1 INT :=0;
		partida_id INT :=0;
		total1 FLOAT :=0;
		codigo_catalogo VARCHAR :='';
		idRegistro_Resultado INT := 0;
		id_catalogoResumen INT := 0;
		totalCuentasR FLOAT :=0;
		debe FLOAT :=0;
		haber FLOAT :=0;
		
		
BEGIN
		--Trae el numero más alto del id de la tabla registros_estados_resultado y suma 1

		--trae el id del catalogo que contiene el registro de la partida
		catalogo_id1 := NEW.catalogo_id;
		--trae el id de la partida que contiene el registro de la partida
		partida_id := NEW.partida_id;
		--trae el id del ciclo
		id_ciclo := (SELECT p.id_cierre FROM partida p WHERE id = partida_id);
		--Trae el valor del codigo del catalogo
		codigo_catalogo := (SELECT substring(codigo, 1, 2) FROM catalogo WHERE id=catalogo_id1);
		--Traer el id de la cuenta detalle del catalogo
		id_catalogoResumen := (SELECT id FROM catalogo WHERE codigo=codigo_catalogo);
		--Trae el id del registro
		idRegistro_Resultado :=(SELECT id FROM registros_estados_resultado r
		WHERE r.id_cierre = id_ciclo and r.catalogo_id =	id_catalogoResumen);
		--Trae el total de las cuentas r
		
		debe := (SELECT Sum(r.debe) FROM catalogo c 
					INNER JOIN registro_partida r ON r.catalogo_id = c.id	
					INNER JOIN partida p ON p.id = r.partida_id
					WHERE c.codigo LIKE  concat(codigo_catalogo,'%') AND id_cierre = id_ciclo);
		haber := (SELECT Sum(r.haber) FROM catalogo c 
					INNER JOIN registro_partida r ON r.catalogo_id = c.id	
					INNER JOIN partida p ON p.id = r.partida_id
					WHERE c.codigo LIKE  concat(codigo_catalogo,'%') AND id_cierre = id_ciclo);
		--Trae la suma de total1
		IF debe >= haber 
			THEN
				total1 := debe - haber;
			ELSE
				total1 := haber - debe;
			END IF;
				
	
		--condicional si el id_cierre existe entonces modifica
		IF EXISTS (SELECT * FROM registros_estados_resultado r
		WHERE r.id_cierre = id_ciclo and r.catalogo_id =	id_catalogoResumen)
		THEN
				UPDATE registros_estados_resultado 
				SET  total_cuentas_segundo = total1, catalogo_id = id_catalogoResumen, id_cierre = id_ciclo, 
				total_cuentas = 0, total_cuentas_tercer = 0
				WHERE id = idRegistro_Resultado;
		ELSE
			INSERT INTO registros_estados_resultado (total_cuentas, total_cuentas_tercer, total_cuentas_segundo, catalogo_id, id_cierre) 
			VALUES(0,0,total1,id_catalogoResumen,id_ciclo);
		END IF;
		RETURN NEW;
		END
$BODY$
LANGUAGE plpgsql;





--FUNCTION DEL DISPARADOR PARA ACUMULAR A CUENTAS A TERCER NIVEL
CREATE OR REPLACE FUNCTION func_TotalResultado()
RETURNS TRIGGER
AS
$BODY$
--Variables
		DECLARE
		id1 INT := 0;
		id_ciclo INT :=0;
		catalogo_id1 INT :=0;
		partida_id INT :=0;
		total1 FLOAT :=0;
		codigo_catalogo VARCHAR :='';
		idRegistro_Resultado INT := 0;
		id_catalogoResumen INT := 0;
		totalCuentasR FLOAT :=0;
		debe FLOAT :=0;
		haber FLOAT :=0;
		
BEGIN
		--Trae el numero más alto del id de la tabla registros_estados_resultado y suma 1

		--trae el id del catalogo que contiene el registro de la partida
		catalogo_id1 := NEW.catalogo_id;
		--trae el id de la partida que contiene el registro de la partida
		partida_id := NEW.partida_id;
		--trae el id del ciclo
		id_ciclo := (SELECT p.id_cierre FROM partida p WHERE id = partida_id);
		--Trae el valor del codigo del catalogo
		codigo_catalogo := (SELECT substring(codigo, 1, 4) FROM catalogo WHERE id=catalogo_id1);
		--Traer el id de la cuenta detalle del catalogo
		id_catalogoResumen := (SELECT id FROM catalogo WHERE codigo=codigo_catalogo);
		--Trae el id del registro
		idRegistro_Resultado :=(SELECT id FROM registros_estados_resultado r
		WHERE r.id_cierre = id_ciclo and r.catalogo_id =	id_catalogoResumen);
		
		--Trae la suma de total1
		debe := (SELECT Sum(r.debe) FROM catalogo c 
					INNER JOIN registro_partida r ON r.catalogo_id = c.id	
					INNER JOIN partida p ON p.id = r.partida_id
					WHERE c.codigo LIKE  concat(codigo_catalogo,'%') AND id_cierre = id_ciclo); /*11000.00*/
		haber := (SELECT Sum(r.haber) FROM catalogo c 
					INNER JOIN registro_partida r ON r.catalogo_id = c.id	
					INNER JOIN partida p ON p.id = r.partida_id
					WHERE c.codigo LIKE  concat(codigo_catalogo,'%') AND id_cierre = id_ciclo);/*24000.00*/
		--Trae la suma de total1
		IF debe >= haber 
			THEN
				total1 := debe - haber;
			ELSE
				total1 := haber - debe;
			END IF;
					
		
		--condicional si el id_cierre existe entonces modifica
		IF EXISTS (SELECT * FROM registros_estados_resultado r WHERE r.id_cierre = id_ciclo and r.catalogo_id =	id_catalogoResumen)
		THEN
				UPDATE registros_estados_resultado 
				SET  total_cuentas_tercer = total1, catalogo_id = id_catalogoResumen, id_cierre = id_ciclo, total_cuentas = 0,
				total_cuentas_segundo =0
				WHERE id = idRegistro_Resultado;
		ELSE
			INSERT INTO registros_estados_resultado (total_cuentas, total_cuentas_segundo ,total_cuentas_tercer, catalogo_id, id_cierre) 
			VALUES(0,0,total1,id_catalogoResumen,id_ciclo);
		END IF;
		RETURN NEW;
		END
$BODY$
LANGUAGE plpgsql;








--FUNCTION DEL DISPARADOR PARA ACUMULAR A CUENTAS A MISMO NIVEL


CREATE OR REPLACE FUNCTION func_TotalResultadoMismoNivel()
RETURNS TRIGGER
AS
$BODY$
--Variables
		DECLARE
		id1 INT := 0;
		id_ciclo INT :=0;
		catalogo_id1 INT :=0;
		partida_id INT :=0;
		total1 FLOAT :=0;
		idRegistro_Resultado INT := 0;
		debe FLOAT :=0;
		haber FLOAT :=0;
		
		
BEGIN
		--Trae el numero más alto del id de la tabla registros_estados_resultado y suma 1

		--trae el id del catalogo que contiene el registro de la partida
		catalogo_id1 := NEW.catalogo_id;
		--trae el id de la partida que contiene el registro de la partida
		partida_id := NEW.partida_id;
		--trae el id del ciclo
		id_ciclo := (SELECT p.id_cierre FROM partida p WHERE id = partida_id);
		
		--Trae el id del registro
		idRegistro_Resultado :=(SELECT id FROM registros_estados_resultado r WHERE r.id_cierre = id_ciclo and r.catalogo_id =	catalogo_id1);
		--Trae la suma de total1
		debe := (SELECT Sum(r.debe) FROM catalogo c 
					INNER JOIN registro_partida r ON r.catalogo_id = c.id	
					INNER JOIN partida p ON p.id = r.partida_id
					WHERE c.id = catalogo_id1 AND id_cierre = id_ciclo);
		haber := (SELECT Sum(r.haber) FROM catalogo c 
					INNER JOIN registro_partida r ON r.catalogo_id = c.id	
					INNER JOIN partida p ON p.id = r.partida_id
					WHERE c.id = catalogo_id1 AND id_cierre = id_ciclo);
		--Trae la suma de total1
		IF debe >= haber 
			THEN
				total1 := debe - haber;
			ELSE
				total1 := haber - debe;
			END IF;
	
	
		--condicional si el id_cierre existe entonces modifica
		IF EXISTS (SELECT * FROM registros_estados_resultado r WHERE r.id_cierre = id_ciclo and r.catalogo_id =	catalogo_id1)
		THEN
			UPDATE registros_estados_resultado SET  total_cuentas = total1, catalogo_id = catalogo_id1, id_cierre = id_ciclo,
			total_cuentas_segundo =0,total_cuentas_tercer =0
			 WHERE id = idRegistro_Resultado;
		ELSE
			INSERT INTO registros_estados_resultado (total_cuentas,total_cuentas_segundo, total_cuentas_tercer, catalogo_id, id_cierre) VALUES(total1,0,0,catalogo_id1,id_ciclo);
		END IF;
		RETURN NEW;
		END
$BODY$
LANGUAGE plpgsql;


--CREACIÓN DEL TRIGGER
CREATE TRIGGER estado_resultadoMismoNivel AFTER INSERT ON registro_partida
FOR EACH ROW
EXECUTE PROCEDURE func_TotalResultadoMismoNivel();


--CREACIÓN DEL TRIGGER
CREATE TRIGGER estado_resultadoSegundoNivel AFTER INSERT ON registro_partida
FOR EACH ROW
EXECUTE PROCEDURE func_TotalResultadoSegundoNivel();

--CREACIÓN DEL TRIGGER
CREATE TRIGGER estado_TotalResultado AFTER INSERT ON registro_partida
FOR EACH ROW
EXECUTE PROCEDURE func_TotalResultado();





INSERT INTO registro_partida (debe, haber,catalogo_id, partida_id) VALUES(0,97345.13,206,2);/*Si VEntas*/
INSERT INTO registro_partida (debe, haber,catalogo_id, partida_id) VALUES(2654.87,0,207,2);/*Si Rebajas sobre ventas*/
INSERT INTO registro_partida (debe, haber,catalogo_id, partida_id) VALUES(100000,0,142,2);/*Si compras*/
INSERT INTO registro_partida (debe, haber,catalogo_id, partida_id) VALUES(1700,0,143,2);/*Si gastos sobre compras*/
INSERT INTO registro_partida (debe, haber,catalogo_id, partida_id) VALUES(0,13200,144,2);/*Si
rebajas y devoluciones*/
INSERT INTO registro_partida (debe, haber,catalogo_id, partida_id) VALUES(0,150000,43,1);/*Si
inventario inicial*/
INSERT INTO registro_partida (debe, haber,catalogo_id, partida_id) VALUES(0,200000,43,2);/*Si inventario final*/

INSERT INTO registro_partida (debe, haber,catalogo_id, partida_id) VALUES(0,6110,13,2);/*Si*/



